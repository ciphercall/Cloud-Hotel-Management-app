@using System.Data
@using System.Data.SqlClient
@using AS_CLOUD_HOTEL.Models
@model AS_CLOUD_HOTEL.Models.HML.HML_RESERVE

@{
    ViewBag.Title = "Create";

    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    CLoudHotelDbContext db = new CLoudHotelDbContext();
    Int64 compid = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);
    Int64 loggedUserID = Convert.ToInt64(HttpContext.Current.Session["loggedUserID"].ToString());

    List<SelectListItem> listof_RESVTP = new List<SelectListItem>();
    listof_RESVTP.Add(new SelectListItem { Text = "ONLINE", Value = "ONLINE" });
    listof_RESVTP.Add(new SelectListItem { Text = "EMAIL", Value = "EMAIL" });
    listof_RESVTP.Add(new SelectListItem { Text = "DIRECT", Value = "DIRECT" });
    listof_RESVTP.Add(new SelectListItem { Text = "TELEPHONE", Value = "TELEPHONE" });
    listof_RESVTP.Add(new SelectListItem { Text = "FAX", Value = "FAX" });

    List<SelectListItem> listof_RESVMODE = new List<SelectListItem>();
    listof_RESVMODE.Add(new SelectListItem { Text = "PERSONAL", Value = "PERSONAL" });
    listof_RESVMODE.Add(new SelectListItem { Text = "COMPANY", Value = "COMPANY" });

    List<SelectListItem> listof_CCYTP = new List<SelectListItem>();
    listof_CCYTP.Add(new SelectListItem { Text = "BDT", Value = "BDT" });
    listof_CCYTP.Add(new SelectListItem { Text = "USD", Value = "USD" });


    List<SelectListItem> listof_GRFID = new List<SelectListItem>();
    var find_RF_GUEST = (from n in db.HmlGuestrfDbSet where n.COMPID == compid select n).ToList();
    foreach (var item in find_RF_GUEST)
    {
        listof_GRFID.Add(new SelectListItem { Text = item.REFERNM, Value = Convert.ToString(item.GRFID) });
    }

    List<SelectListItem> listofStatus = new List<SelectListItem>();
    listofStatus.Add(new SelectListItem { Text = "ACTIVE", Value = "ACTIVE" });
    listofStatus.Add(new SelectListItem { Text = "INACTIVE", Value = "INACTIVE" });
    

    TimeZoneInfo timeZoneInfo;
    timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("Central Asia Standard Time");
    DateTime currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, timeZoneInfo);


}
<link href="~/Content/bootstrap_datepicker_css/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap_datepicker_css/datepicker3.css" rel="stylesheet" />

<script src="~/Scripts/bootstrap-datepicker.js"></script>

<link href="~/Content/bootstrap_clock_picker/src/clockpicker.css" rel="stylesheet" />
<script src="~/Content/bootstrap_clock_picker/src/clockpicker.js"></script>
<link href="~/Content/bootstrap_clock_picker/src/standalone.css" rel="stylesheet" />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.COMPID, new { @Value = compid })
    @Html.HiddenFor(model => model.INSUSERID, new { @Value = loggedUserID })


    <div id="contentHeaderBox" style="height:auto">
        @if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A")
        {

            var createStatus = "";
            var updateStatus = "";
            var deleteStatus = "";
            var status = "";

            var checkPermisiion = (from m in db.AslRoleDbSet
                                   where m.COMPID == compid && m.USERID == loggedUserID && m.CONTROLLERNAME == "Reserve"
                                   select m).ToList();


            foreach (var x in checkPermisiion)
            {
                status = x.STATUS.ToString();
                createStatus = x.INSERTR.ToString();
                updateStatus = x.UPDATER.ToString();
                deleteStatus = x.DELETER.ToString();
            }


            if (createStatus == "I")
            {
                Response.Redirect("~/GraphView/Index");
            }

            if (createStatus == 'A'.ToString())
            {
                <ul class="nav nav-tabs" role="tablist">
                    <li class="active">@Html.ActionLink("RESERVATION-BASIC", "Create", "Reserve", "", new { style = "color: white;background-color: #286090;" })</li>
                    <li>@Html.ActionLink("ROOM", "Index", "ReserveRoom", "", new { style = "color: black" })</li>
                    <li>@Html.ActionLink("PAYMENT", "Create", "ReservePayment", "", htmlAttributes: new { style = "color: black" })</li>
                    <li>@Html.ActionLink("COMPLEMENTARY ITEM", "Index", "ReserveComplementaryItem", "", new { style = "color: black" })</li>
                </ul>
            }

            <div class="btn-group pull-right" id="editOption">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                    <i class="fa fa-cog"></i>
                </button>
                <ul class="dropdown-menu pull-right" style="" role="menu">
                    @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Reserve")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Update", "Reserve")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Reserve")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Update", "Reserve")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Reserve")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Reserve")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Update", "Reserve")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Reserve")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Reserve")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Reserve")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Update", "Reserve")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Delete", "Reserve")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                </ul>
            </div>

        }

    </div>
    <br />

    <div class="col-md-12">
        <div class="panel panel-success">
            @if (TempData["ReserveCreateMessage"] != null)
            {
                <div class="panel-heading" style=" text-align: center; background-image: linear-gradient(to bottom, #286090 0%, #286090 100%); background-repeat: repeat-x; color: white; background-color: #286090; border-color: #286090;">RESERVATION-BASIC (CREATE)- @TempData["ReserveCreateMessage"]</div>
            }
            else
            {
                <div class="panel-heading" style=" text-align: center; background-image: linear-gradient(to bottom, #286090 0%, #286090 100%); background-repeat: repeat-x; color: white; background-color: #286090; border-color: #286090;">RESERVATION-BASIC (CREATE)</div>
            }
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.RESVDT, htmlAttributes: new { @class = "form-control input-sm", @Value = currentDateTime.ToString("dd-MMM-yyyy"), @tabindex = "-1", @readonly = "readonly" })
                </div>

                <div class="col-md-2" style="text-align: right">
                    @Html.Label("name", "Year", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.RESVYY, htmlAttributes: new { @class = "form-control input-sm", @Value = currentDateTime.ToString("yyyy"), @tabindex = "-1", @readonly = "readonly", @maxlength = "4" })
                </div>
                <div class="col-md-2" style="text-align: right">
                    @Html.Label("name", "Arrival Time", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    <div class="input-group clockpicker" data-align="top" data-autoclose="true">
                        @Html.TextBoxFor(model => model.ARRIVETM, htmlAttributes: new { @class = "form-control input-sm", @Value = "00:01" })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-time"></span>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.ARRIVETM, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Check In", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CHECKI, htmlAttributes: new { id = "txt_CHECKI", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.CHECKI, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Check Out", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.GHECKO, htmlAttributes: new { id = "txt_GHECKO", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.GHECKO, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Reserve Type", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.RESVTP, listof_RESVTP, "-SELECT-", htmlAttributes: new { id = "txt_RESVTP", @class = "form-control input-sm", @maxlength = "10" })
                </div>

                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Reserve Mode", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.RESVMODE, listof_RESVMODE, "-SELECT-", htmlAttributes: new { @class = "form-control input-sm", @maxlength = "8" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Contact Person(CP)", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.CPNM, htmlAttributes: new { @class = "form-control input-sm", @maxlength = "100" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Email ID", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.CPEMAIL, htmlAttributes: new { @class = "form-control input-sm", @maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.CPEMAIL, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Tel No (CP)", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CPTELNO, htmlAttributes: new { @class = "form-control input-sm", @maxlength = "30" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Mobile No (CP)", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CPMOBNO, htmlAttributes: new { id = "txtWTNET", @class = "form-control input-sm", @maxlength = "11" })
                    @Html.ValidationMessageFor(model => model.CPMOBNO, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Guest Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.GUESTNM, htmlAttributes: new { id = "txtCNFV_USD", @class = "form-control input-sm", @maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.GUESTNM, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Person (Adult)", htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.ADULTQP, htmlAttributes: new {id = "txtCNFV_ERT", @class = "form-control input-sm", @maxlength = "3", @type = "number", @Value = "0"})
                    @Html.ValidationMessageFor(model => model.ADULTQP, "", new {@class = "text-danger"})
                </div>
                <div class="col-md-2" style="text-align: right">
                    @Html.Label("name", "Person (Child)", htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.CHILDQP, htmlAttributes: new {id = "txtCNFV_BDT", @class = "form-control input-sm", @maxlength = "3", @type = "number", @Value = "0"})
                    @Html.ValidationMessageFor(model => model.CHILDQP, "", new {@class = "text-danger"})
                </div>
                <div class="col-md-2" style="text-align: right">
                    @Html.Label("name", "Currency Type", htmlAttributes: new {@class = "control-label"})
                </div>
                <div class="col-md-2">
                    @Html.DropDownListFor(model => model.CCYTP, listof_CCYTP, htmlAttributes: new {id = "txtCRFV_USD", @class = "form-control input-sm"})
                    @Html.ValidationMessageFor(model => model.CCYTP, "", new {@class = "text-danger"})
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Remarks", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.REMARKS, htmlAttributes: new { @class = "form-control input-sm", @maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.REMARKS, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "RF (Guest)", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.GRFID, listof_GRFID, "-Select-", htmlAttributes: new { id = "txtCOMMAMT", @class = "form-control input-sm" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Status", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.RESVSTATS,listofStatus, htmlAttributes: new { @class = "form-control input-sm", @maxlength = "7" })
                    @Html.ValidationMessageFor(model => model.RESVSTATS, "", new { @class = "text-danger" })
                </div>
            </div>

           




            @Html.TextBoxFor(model => model.INSLTUDE, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />

            <br />
            <div class="row">
                <div class="col-md-4"></div>
                <div class="col-md-4">
                    <input type="submit" class="btn btn-primary btn-block" value="Save" name="command" />
                </div>
                <div class="col-md-4"></div>
            </div>
        </div>
    </div>


    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }

            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });
    </script>


    //datatime picker script
    <script type="text/javascript">
        $('.clockpicker').clockpicker();
    </script>


    <script type="text/javascript">
        $(document).ready(function () {

            $('#txt_CHECKI').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true,
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                }
                else {
                    $(this).data('stickyDate', null);
                }
            }).on('hide', function (e) {
                var stickyDate = $(this).data('stickyDate');

                if (!e.date && stickyDate) {
                    $(this).datepicker('setDate', stickyDate);
                    $(this).data('stickyDate', null);
                }
                document.getElementById("txt_GHECKO").focus();
            });

            $('#txt_GHECKO').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true,
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                }
                else {
                    $(this).data('stickyDate', null);
                }
            }).on('hide', function (e) {
                var stickyDate = $(this).data('stickyDate');

                if (!e.date && stickyDate) {
                    $(this).datepicker('setDate', stickyDate);
                    $(this).data('stickyDate', null);
                }
                document.getElementById("txt_RESVTP").focus();
            });

        });
    </script>


}

@*<script src="~/Scripts/jquery-1.9.1.min.js"></script>*@

@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@



@*<script src="~/Scripts/jquery.js"></script>*@
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
