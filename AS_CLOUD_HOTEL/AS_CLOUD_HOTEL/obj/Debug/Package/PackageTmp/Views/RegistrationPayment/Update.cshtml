@using System.Data
@using System.Data.SqlClient
@using AS_CLOUD_HOTEL.Models
@model AS_CLOUD_HOTEL.Models.HML.HML_REGNPAY

@{
    ViewBag.Title = "Update";

    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    CLoudHotelDbContext db = new CLoudHotelDbContext();
    Int64 compid = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);
    Int64 loggedUserID = Convert.ToInt64(HttpContext.Current.Session["loggedUserID"].ToString());

    List<SelectListItem> listof_TRFOR = new List<SelectListItem>();
    listof_TRFOR.Add(new SelectListItem { Text = "ADVANCE", Value = "ADVANCE" });
    listof_TRFOR.Add(new SelectListItem { Text = "BILL", Value = "BILL" });

    List<SelectListItem> listof_TRMODE = new List<SelectListItem>();
    listof_TRMODE.Add(new SelectListItem { Text = "CASH", Value = "CASH" });
    listof_TRMODE.Add(new SelectListItem { Text = "CHEQUE", Value = "CHEQUE" });
    listof_TRMODE.Add(new SelectListItem { Text = "CREDIT", Value = "CREDIT" });

    List<SelectListItem> listof_CCYTP = new List<SelectListItem>();
    listof_CCYTP.Add(new SelectListItem { Text = "BDT", Value = "BDT" });
    listof_CCYTP.Add(new SelectListItem { Text = "USD", Value = "USD" });


    TimeZoneInfo timeZoneInfo;
    timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("Central Asia Standard Time");
    DateTime currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, timeZoneInfo);


}
<link href="~/Content/bootstrap_datepicker_css/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap_datepicker_css/datepicker3.css" rel="stylesheet" />

<script src="~/Scripts/bootstrap-datepicker.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.COMPID, new { @Value = compid, id = "txtCompanyid" })
    @Html.HiddenFor(model => model.UPDUSERID, new { @Value = loggedUserID })
    @Html.HiddenFor(model => model.ID, new { id = "txthidden_ID" })

    <div id="contentHeaderBox" style="height:auto">
        @if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A")
        {

            var createStatus = "";
            var updateStatus = "";
            var deleteStatus = "";
            var status = "";

            var checkPermisiion = (from m in db.AslRoleDbSet
                                   where m.COMPID == compid && m.USERID == loggedUserID && m.CONTROLLERNAME == "Registration"
                                   select m).ToList();


            foreach (var x in checkPermisiion)
            {
                status = x.STATUS.ToString();
                createStatus = x.INSERTR.ToString();
                updateStatus = x.UPDATER.ToString();
                deleteStatus = x.DELETER.ToString();
            }


            if (updateStatus == "I")
            {
                Response.Redirect("~/GraphView/Index");
            }

            if (updateStatus == 'A'.ToString())
            {
                <ul class="nav nav-tabs" role="tablist">
                    <li>@Html.ActionLink("REGISTRATION", "Create", "Registration", "", new { style = "color: black" })</li>
                    <li class="active">@Html.ActionLink("PAYMENT", "Create", "RegistrationPayment", "", new { style = "color: white;background-color: #286090;" })</li>
                    <li>@Html.ActionLink("GUEST", "Create", "RegistrationGuests", "", htmlAttributes: new { style = "color: black" })</li>
                    <li>@Html.ActionLink("COMPLEMENTARY ITEM", "Index", "RegistrationComplementaryItem", "", new { style = "color: black" })</li>
                </ul>
            }

            <div class="btn-group pull-right" id="editOption">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                    <i class="fa fa-cog"></i>
                </button>
                <ul class="dropdown-menu pull-right" style="" role="menu">
                    @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "RegistrationPayment")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Update", "RegistrationPayment")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "RegistrationPayment")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Update", "RegistrationPayment")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "RegistrationPayment")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "RegistrationPayment")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Update", "RegistrationPayment")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "RegistrationPayment")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "RegistrationPayment")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "RegistrationPayment")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Update", "RegistrationPayment")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Delete", "RegistrationPayment")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                </ul>
            </div>

        }

    </div>
    <br />

    <div class="col-md-12">
        <div class="panel panel-success">
            @if (TempData["RegistrationPaymentUpdateMessage"] != null)
            {
                <div class="panel-heading" style=" text-align: center; background-image: linear-gradient(to bottom, #286090 0%, #286090 100%); background-repeat: repeat-x; color: white; background-color: #286090; border-color: #286090;">REGISTRATION-PAYMENT (UPDATE)- @TempData["RegistrationPaymentUpdateMessage"]</div>
            }
            else
            {
                <div class="panel-heading" style=" text-align: center; background-image: linear-gradient(to bottom, #286090 0%, #286090 100%); background-repeat: repeat-x; color: white; background-color: #286090; border-color: #286090;">REGISTRATION-PAYMENT (UPDATE)</div>
            }
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Month-Year", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.TRANSMY, htmlAttributes: new { id = "txt_TRANSMY", @class = "form-control input-sm", @Value = currentDateTime.ToString("MMM-yy"), @tabindex = "-1" })
                </div>

                <div class="col-md-2" style="text-align: right">
                    @Html.Label("name", "Transaction NO", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.TRANSNO, htmlAttributes: new { id = "txt_TRANSNO", @class = "form-control input-sm", })
                </div>

                <div class="col-md-2">
                    @Html.Label("name", "Payment Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.TRANSDT, htmlAttributes: new { id = "txt_TRANSDT", @class = "form-control input-sm", @readonly = "readonly", @tabindex = "-1", })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Registration Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    <input type="text" class="form-control input-sm" id="txt_REGNDT" readonly="readonly" />
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Registration ID", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.REGNID, htmlAttributes: new { id = "txt_REGNID", @class = "form-control input-sm", @type = "number", @maxlength = "8", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.REGNID, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Room No", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    <input type="text" class="form-control input-sm" id="txt_ROOMNO" readonly="readonly" />
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Transaction For", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.TRFOR, listof_TRFOR, htmlAttributes: new { id = "txt_TRFOR", @class = "form-control input-sm", })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Payment Mode", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.TRMODE, listof_TRMODE, htmlAttributes: new { id = "txt_TRMODE", @class = "form-control input-sm", @maxlength = "10" })
                </div>

                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Currency Type", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.CCYTP, listof_CCYTP, htmlAttributes: new { id = "txt_CCYTP", @class = "form-control input-sm", @maxlength = "8" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Amount	", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.AMOUNT, htmlAttributes: new { id = "txt_AMOUNT", @class = "form-control input-sm", @maxlength = "17", @type = "number", @Step = "any", @Value = "0" })
                    @Html.ValidationMessageFor(model => model.AMOUNT, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Remarks", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextAreaFor(model => model.REMARKS, htmlAttributes: new { id = "txt_REMARKS", @class = "form-control input-sm", @maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.REMARKS, "", new { @class = "text-danger" })
                </div>
            </div>

            @Html.HiddenFor(model => model.INSTIME, new { id = "HiddentxtInstime" })
            @Html.HiddenFor(model => model.INSIPNO, new { id = "HiddentxtInsipno" })
            @Html.HiddenFor(model => model.INSLTUDE, new { id = "HiddentxtInsltude" })
            @Html.HiddenFor(model => model.INSUSERID, new { id = "HiddentxtInsuserId" })

            @Html.TextBoxFor(model => model.UPDLTUDE, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />

            <br />
            <div class="row">
                <div class="col-md-3">
                    <input type="submit" class="btn btn-primary btn-block" value="Update" name="command"/>
                </div>
                <div class="col-md-3">
                    <input type="submit" id="Memo_ButtonId" class="btn btn-default btn-block" name="command" value="Memo" data-toggle="tooltip" data-placement="bottom" title="Paper size A4" formtarget="_blank" tabindex="15" />
                </div>
                <div class="col-md-6"></div>
            </div>
        </div>
    </div>




    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }

            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });
    </script>


    //datatime picker script
    <script type="text/javascript">
        $('.clockpicker').clockpicker();
    </script>


    <script type="text/javascript">
        $(document).ready(function () {

            $('#Memo_ButtonId').click(function () {
                setTimeout(function () { window.location.reload(); }, 100);
            });

            $("#txt_TRANSMY").datepicker({
                changeMonth: true,
                changeYear: true,
                showButtonPanel: true,
                dateFormat: "M-y",

            }).focus(function () {
                var thisCalendar = $(this);
                $('.ui-datepicker-calendar').detach();
                $('.ui-datepicker-close').click(function () {
                    var month = $("#ui-datepicker-div .ui-datepicker-month :selected").val();
                    var year = $("#ui-datepicker-div .ui-datepicker-year :selected").val();
                    thisCalendar.datepicker('setDate', new Date(year, month, 1));
                    $("#txt_TRANSNO").val("");
                    $("#txt_TRANSDT").val("");
                    $("#txt_REGNDT").val("");
                    $("#txt_REGNID").val("");
                    $("#txt_ROOMNO").val("");
                    $("#txt_TRFOR").val("");
                    $("#txt_TRMODE").val("CASH");
                    $("#txt_CCYTP").val("BDT");
                    $("#txt_AMOUNT").val("0");
                    $("#txt_REMARKS").val("");
                    document.getElementById("txt_TRANSNO").focus();
                });
            });



            $('#txt_TRANSNO').autocomplete({

                source: function (request, response) {
                    var companyID = $('#txtCompanyid').val();
                    var transMonthYear = $("#txt_TRANSMY").val();
                    $.ajax({
                        url: '/RegistrationPayment/TagSearch_TransNO',
                        type: 'GET',
                        cache: false,
                        data: { character: request.term, monthYear: transMonthYear, compid: companyID },
                        dataType: 'json',
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item,
                                    value: item,
                                };
                            }));
                        }
                    });
                },
                change: $('#txt_TRANSNO').keyup(_.debounce(txtOneChanged, 500)),
                select: function (event, ui) {
                    $("#txt_TRANSNO").val(ui.item.label);
                    txtOneChanged();
                },
            });


            function txtOneChanged() {
                var changedText = $("#txt_TRANSNO").val();
                var companyID = $('#txtCompanyid').val();
                var transMonthYear = $("#txt_TRANSMY").val();

                var txtBox = document.getElementById('txt_TRANSNO');
                var txt_TRANSMY = document.getElementById('txt_TRANSMY');

                var txt_ID = document.getElementById('txthidden_ID');
                var txt_TRANSDT = document.getElementById('txt_TRANSDT');
                var txt_REGNDT = document.getElementById('txt_REGNDT');
                var txt_ROOMNO = document.getElementById('txt_ROOMNO');
                var txt_REGNID = document.getElementById('txt_REGNID');
                var txt_TRFOR = document.getElementById('txt_TRFOR');
                var txt_TRMODE = document.getElementById('txt_TRMODE');
                var txt_CCYTP = document.getElementById('txt_CCYTP');
                var txt_AMOUNT = document.getElementById('txt_AMOUNT');
                var txt_REMARKS = document.getElementById('txt_REMARKS');

                var txtInseruserId = document.getElementById('HiddentxtInsuserId');
                var txtInsertime = document.getElementById('HiddentxtInstime');
                var txtinslutude = document.getElementById('HiddentxtInsltude');
                var txtinseripno = document.getElementById('HiddentxtInsipno');
                $.getJSON(
                    '/RegistrationPayment/GetData', { "ChangedText": changedText, "TransMonthYear": transMonthYear, "CompanyID": companyID },
                    function (result) {
                        txtBox.value = result.TRANSNO;
                        //txt_TRANSMY.value = result.TRANSMY;

                        txt_ID.value = result.ID;
                        txt_TRANSDT.value = result.TRANSDT;
                        txt_REGNDT.value = result.REGNDT;
                        txt_ROOMNO.value = result.ROOMNO;
                        txt_REGNID.value = result.REGNID;
                        txt_TRFOR.value = result.TRFOR;
                        txt_TRMODE.value = result.TRMODE;
                        txt_CCYTP.value = result.CCYTP;
                        txt_AMOUNT.value = result.AMOUNT;
                        txt_REMARKS.value = result.REMARKS;

                        txtInseruserId.value = result.INSUSERID;
                        txtInsertime.value = result.INSTIME;
                        txtinslutude.value = result.INSLTUDE;
                        txtinseripno.value = result.INSIPNO;


                    });

                $("#txthidden_ID").val("");
                $("#txt_TRANSDT").val("");
                $("#txt_REGNDT").val("");
                $("#txt_REGNID").val("");
                $("#txt_ROOMNO").val("");
                $("#txt_TRFOR").val("ADVANCE");
                $("#txt_TRMODE").val("CASH");
                $("#txt_CCYTP").val("BDT");
                $("#txt_AMOUNT").val("0");
                $("#txt_REMARKS").val("");

            }




        });
    </script>

    <style type="text/css">
        .ui-autocomplete {
            position: absolute;
            cursor: default;
            background: #f0ffff;
            max-height: 200px;
            overflow-y: auto;
            /* prevent horizontal scrollbar */
            overflow-x: hidden;
            /* add padding to account for vertical scrollbar */
            padding-right: 20px;
        }
    </style>
}

<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.9.1.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>
<script src="~/Scripts/Underscore.js"></script>
@*<script src="~/Scripts/jquery.js"></script>*@



<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>





