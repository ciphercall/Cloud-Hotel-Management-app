@using System.Data
@using System.Data.SqlClient
@using AS_CLOUD_HOTEL.Models
@model AS_CLOUD_HOTEL.Models.HML.HML_REGN

@{
    ViewBag.Title = "Create";

    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    CLoudHotelDbContext db = new CLoudHotelDbContext();
    Int64 compid = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);
    Int64 loggedUserID = Convert.ToInt64(HttpContext.Current.Session["loggedUserID"].ToString());

    List<SelectListItem> listof_RESVYN = new List<SelectListItem>();
    listof_RESVYN.Add(new SelectListItem { Text = "YES", Value = "YES" });
    listof_RESVYN.Add(new SelectListItem { Text = "NO", Value = "NO" });

    List<SelectListItem> listof_VISITPRE = new List<SelectListItem>();
    listof_VISITPRE.Add(new SelectListItem { Text = "YES", Value = "YES" });
    listof_VISITPRE.Add(new SelectListItem { Text = "NO", Value = "NO" });

    List<SelectListItem> listof_CCYTP = new List<SelectListItem>();
    listof_CCYTP.Add(new SelectListItem { Text = "BDT", Value = "BDT" });
    listof_CCYTP.Add(new SelectListItem { Text = "USD", Value = "USD" });


    List<SelectListItem> listof_GRFID = new List<SelectListItem>();
    var find_RF_GUEST = (from n in db.HmlGuestrfDbSet where n.COMPID == compid select n).ToList();
    foreach (var item in find_RF_GUEST)
    {
        listof_GRFID.Add(new SelectListItem { Text = item.REFERNM, Value = Convert.ToString(item.GRFID) });
    }


    List<SelectListItem> listofRoomtype = new List<SelectListItem>();
    var find_RoomType = (from n in db.HmlRoomTpDbSet where n.COMPID == compid select n).ToList();
    foreach (var item in find_RoomType)
    {
        listofRoomtype.Add(new SelectListItem { Text = item.RTPNM, Value = Convert.ToString(item.RTPID) });
    }

    List<SelectListItem> listofDiscounttype = new List<SelectListItem>();
    listofDiscounttype.Add(new SelectListItem { Text = "FIXED", Value = "FIXED" });
    listofDiscounttype.Add(new SelectListItem { Text = "PERCENTAGE", Value = "PERCENTAGE" });

    List<SelectListItem> listofGuestCompany = new List<SelectListItem>();
    var findGuestCompany = (from n in db.HmlGuestcoDbSet where n.COMPID == compid select n).ToList();
    foreach (var item in findGuestCompany)
    {
        listofGuestCompany.Add(new SelectListItem { Text = item.GCONM, Value = Convert.ToString(item.GCOID) });
    }

    TimeZoneInfo timeZoneInfo;
    timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("Central Asia Standard Time");
    DateTime currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, timeZoneInfo);


}
<link href="~/Content/bootstrap_datepicker_css/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap_datepicker_css/datepicker3.css" rel="stylesheet" />

<script src="~/Scripts/bootstrap-datepicker.js"></script>

<link href="~/Content/bootstrap_clock_picker/src/clockpicker.css" rel="stylesheet" />
<script src="~/Content/bootstrap_clock_picker/src/clockpicker.js"></script>
<link href="~/Content/bootstrap_clock_picker/src/standalone.css" rel="stylesheet" />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.COMPID, new { @Value = compid, id = "txtCompanyid" })
    @Html.HiddenFor(model => model.INSUSERID, new { @Value = loggedUserID })


    <div id="contentHeaderBox" style="height:auto">
        @if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A")
        {

            var createStatus = "";
            var updateStatus = "";
            var deleteStatus = "";
            var status = "";

            var checkPermisiion = (from m in db.AslRoleDbSet
                                   where m.COMPID == compid && m.USERID == loggedUserID && m.CONTROLLERNAME == "Registration"
                                   select m).ToList();


            foreach (var x in checkPermisiion)
            {
                status = x.STATUS.ToString();
                createStatus = x.INSERTR.ToString();
                updateStatus = x.UPDATER.ToString();
                deleteStatus = x.DELETER.ToString();
            }


            if (createStatus == "I")
            {
                Response.Redirect("~/GraphView/Index");
            }

            if (createStatus == 'A'.ToString())
            {
                <ul class="nav nav-tabs" role="tablist">
                    <li class="active">@Html.ActionLink("REGISTRATION", "Create", "Registration", "", new { style = "color: white;background-color: #286090;" })</li>
                    <li>@Html.ActionLink("PAYMENT", "Create", "RegistrationPayment", "", new { style = "color: black" })</li>
                    <li>@Html.ActionLink("GUEST", "Create", "RegistrationGuests", "", htmlAttributes: new { style = "color: black" })</li>
                    <li>@Html.ActionLink("COMPLEMENTARY ITEM", "Index", "RegistrationComplementaryItem", "", new { style = "color: black" })</li>
                </ul>
            }

            <div class="btn-group pull-right" id="editOption">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                    <i class="fa fa-cog"></i>
                </button>
                <ul class="dropdown-menu pull-right" style="" role="menu">
                    @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Registration")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Update", "Registration")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Registration")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Update", "Registration")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Registration")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Registration")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Update", "Registration")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Registration")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "Registration")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "Registration")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Update", "Registration")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Delete", "Registration")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                </ul>
            </div>

        }

    </div>
    <br />

    <div class="col-md-12">
        <div class="panel panel-success">
            @if (TempData["RegistrationCreateMessage"] != null)
            {
                <div class="panel-heading" style=" text-align: center; background-image: linear-gradient(to bottom, #286090 0%, #286090 100%); background-repeat: repeat-x; color: white; background-color: #286090; border-color: #286090;">REGISTRATION-BASIC (CREATE)- @TempData["RegistrationCreateMessage"]</div>
            }
            else
            {
                <div class="panel-heading" style=" text-align: center; background-image: linear-gradient(to bottom, #286090 0%, #286090 100%); background-repeat: repeat-x; color: white; background-color: #286090; border-color: #286090;">REGISTRATION-BASIC (CREATE)</div>
            }
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.REGNDT, htmlAttributes: new { id = "txt_REGNDT", @class = "form-control input-sm", @Value = currentDateTime.ToString("dd-MMM-yyyy"), @tabindex = "-1", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.REGNDT, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Year", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.REGNYY, htmlAttributes: new { id = "txt_REGNYY", @class = "form-control input-sm", @Value = currentDateTime.ToString("yyyy"), @tabindex = "-1", @readonly = "readonly", @maxlength = "4" })
                    @Html.ValidationMessageFor(model => model.REGNYY, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Check In", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CHECKI, htmlAttributes: new { id = "txt_CHECKI", @class = "form-control input-sm", @Value = currentDateTime.ToString("dd-MMM-yyyy"), @tabindex = "-1", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.CHECKI, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Check Out", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.GHECKO, htmlAttributes: new { id = "txt_GHECKO", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.GHECKO, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Reservation", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.RESVYN, listof_RESVYN, htmlAttributes: new { id = "txt_RESVYN", @class = "form-control input-sm", @maxlength = "3" })
                    @Html.ValidationMessageFor(model => model.RESVYN, "", new { @class = "text-danger" })
                </div>
            </div>
            <div id="reservationDiv">
                <br />
                <div class="row">
                    <div class="col-md-2">
                        @Html.Label("name", "Reservation Date", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        <input type="text" class="form-control" id="txt_RESVDATE" />
                    </div>
                    <div class="col-md-4" style="text-align: right">
                        @Html.Label("name", "Reservation ID", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.DropDownListFor(model => model.RESVID, new SelectList(string.Empty, "Value", "Text"), "- Select -", htmlAttributes: new { id = "txt_RESVID", @class = "form-control input-sm" })
                        @*@Html.TextBoxFor(model => model.RESVID, htmlAttributes: new {id = "txt_RESVID", @class = "form-control input-sm", @type = "number", @maxlength = "8"})*@
                        @Html.ValidationMessageFor(model => model.RESVID, "", new { @class = "text-danger" })
                        @if (ViewBag.ReserveID_ValidationMessage != null)
                        {
                            <h6 style="color: #C03523">@ViewBag.ReserveID_ValidationMessage</h6>
                        }
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        @Html.Label("name", "Contact Person", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-10">
                        <input type="text" class="form-control input-sm" id="txt_CPNM" readonly="readonly" />
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Guest company", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.GCOID,listofGuestCompany,"-SELECT-", htmlAttributes: new { id = "txt_GCOID", @class = "form-control input-sm", @maxlength = "10", @type = "number", @Value = "0" })
                    @Html.ValidationMessageFor(model => model.GCOID, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Currency Type", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.CCYTP, listof_CCYTP, htmlAttributes: new { id = "txt_CCYTP", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.CCYTP, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Exchange Rate", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CCYCRT, htmlAttributes: new { id = "txt_CCYCRT", @class = "form-control input-sm", @maxlength = "11", @type = "number", @Step = "any", @Value = "0" })
                    @Html.ValidationMessageFor(model => model.CCYCRT, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Room Type", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.RTPID, listofRoomtype, "-SELECT-", htmlAttributes: new { id = "txt_RTPID", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.RTPID, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Room No", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.ROOMNO, new SelectList(string.Empty, "Value", "Text"), "- Select -", htmlAttributes: new { id = "txt_ROOMNO", @class = "form-control input-sm" })
                    @*@Html.TextBoxFor(model => model.ROOMNO, htmlAttributes: new {id = "txt_ROOMNO", @class = "form-control input-sm", @maxlength = "3", @type = "number", @Value = "0"})*@
                    @Html.ValidationMessageFor(model => model.ROOMNO, "", new { @class = "text-danger" })
                    @if (ViewBag.RoomNO_ValidationMessage != null)
                    {
                        <h6 style="color: #C03523">@ViewBag.RoomNO_ValidationMessage</h6>
                    }
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Rate (Offer)", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.ROOMRTO, htmlAttributes: new { id = "txt_ROOMRTO", @class = "form-control input-sm", @maxlength = "12", @type = "number", @Step = "any", @Value = "0" })
                    @Html.ValidationMessageFor(model => model.ROOMRTO, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Discount Type", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.DISCTP, listofDiscounttype, htmlAttributes: new { id = "txt_DISCTP", @class = "form-control input-sm", })
                    @Html.ValidationMessageFor(model => model.DISCTP, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Discount Amount", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.DISCRT, htmlAttributes: new { id = "txt_DISCRT", @class = "form-control input-sm", @maxlength = "10", @type = "number", @Step = "any", @Value = "0" })
                    @Html.ValidationMessageFor(model => model.DISCRT, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Rate (Negotiated)", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.ROOMRTS, htmlAttributes: new { id = "txt_ROOMRTS", @class = "form-control input-sm", @maxlength = "12", @type = "number", @Step = "any", @Value = "0", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.ROOMRTS, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Visit Purpose", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.VISITPP, htmlAttributes: new { id = "txt_VISITPP", @class = "form-control input-sm", @maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.VISITPP, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Previsiosly Visited", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.VISITPRE, listof_VISITPRE, htmlAttributes: new { id = "txt_VISITPRE", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.VISITPRE, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "Coming From", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.DESTFR, "-Select-", htmlAttributes: new { id = "txt_DESTFR", @class = "form-control input-sm", @maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.DESTFR, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Next Destination", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.DESTTO, htmlAttributes: new { id = "txt_DESTTO", @class = "form-control input-sm", @maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.DESTTO, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("name", "RF (Guest)", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.GRFID, listof_GRFID, "-Select-", htmlAttributes: new { id = "txt_GRFID", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.GRFID, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4" style="text-align: right">
                    @Html.Label("name", "Remarks", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextAreaFor(model => model.REMARKS, htmlAttributes: new { id = "txt_REMARKS", @class = "form-control input-sm", @maxlength = "100" })
                    @Html.ValidationMessageFor(model => model.REMARKS, "", new { @class = "text-danger" })
                </div>
            </div>

            @Html.TextBoxFor(model => model.INSLTUDE, new { id = "latlon", style = "display: none;" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />

            <br />
            <div class="row">
                <div class="col-md-4"></div>
                <div class="col-md-4">
                    <input type="submit" class="btn btn-primary btn-block" value="Save" name="command" />
                </div>
                <div class="col-md-4"></div>
            </div>
        </div>
    </div>


    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }

            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });
    </script>


                    //datatime picker script
                    <script type="text/javascript">
                        $('.clockpicker').clockpicker();
                    </script>


                    <script type="text/javascript">
                        $(document).ready(function () {

                            //$('#txt_CHECKI').datepicker({
                            //    format: "dd-M-yyyy",
                            //    autoclose: true,
                            //    todayHighlight: true,
                            //    showOnFocus: true,
                            //}).on('show', function (e) {
                            //    if (e.date) {
                            //        $(this).data('stickyDate', e.date);
                            //    } else {
                            //        $(this).data('stickyDate', null);
                            //    }
                            //}).on('hide', function (e) {
                            //    var stickyDate = $(this).data('stickyDate');

                            //    if (!e.date && stickyDate) {
                            //        $(this).datepicker('setDate', stickyDate);
                            //        $(this).data('stickyDate', null);
                            //    }
                            //    document.getElementById("txt_GHECKO").focus();
                            //});

                            $('#txt_GHECKO').datepicker({
                                format: "dd-M-yyyy",
                                autoclose: true,
                                todayHighlight: true,
                                showOnFocus: true,
                            }).on('show', function (e) {
                                if (e.date) {
                                    $(this).data('stickyDate', e.date);
                                } else {
                                    $(this).data('stickyDate', null);
                                }
                            }).on('hide', function (e) {
                                var stickyDate = $(this).data('stickyDate');

                                if (!e.date && stickyDate) {
                                    $(this).datepicker('setDate', stickyDate);
                                    $(this).data('stickyDate', null);
                                }
                                document.getElementById("txt_RESVYN").focus();
                            });

                            $('#txt_RESVDATE').datepicker({
                                format: "dd-M-yyyy",
                                autoclose: true,
                                todayHighlight: true,
                                showOnFocus: true,
                            }).on('show', function (e) {
                                if (e.date) {
                                    $(this).data('stickyDate', e.date);
                                } else {
                                    $(this).data('stickyDate', null);
                                }
                            }).on('hide', function (e) {
                                var stickyDate = $(this).data('stickyDate');

                                if (!e.date && stickyDate) {
                                    $(this).datepicker('setDate', stickyDate);
                                    $(this).data('stickyDate', null);
                                }
                                document.getElementById("txt_RESVID").focus();
                            });


                            $('#txt_RESVDATE').change(function () {
                                var datetxt = $('#txt_RESVDATE').val();
                                var companyid = $('#txtCompanyid').val();
                                $("#txt_RESVID").val(" ");
                                $.ajax
                                ({
                                    url: '@Url.Action("ReserveIDload", "Reserve")',
                                    type: 'post',
                                    dataType: "json",
                                    data: { theDate: datetxt, compid: companyid },
                                    success: function (data) {
                                        $("#txt_RESVID").empty();
                                        $("#txt_RESVID").append('<option value="'
                                            + "select" + '">'
                                            + "select" + '</option>');


                                        $.each(data, function (i, memo) {

                                            $("#txt_RESVID").append('<option value="'
                                                + memo.Value + '">'
                                                + memo.Text + '</option>');

                                        });
                                    }
                                });
                            });

                            $('#txt_RESVID').change(function () {
                                var changedText = $("#txt_RESVID").val();
                                var reservDate = $("#txt_RESVDATE").val();
                                var compid = $('#txtCompanyid').val();

                                var txtBox = document.getElementById('txt_RESVID');
                                var txt_RESVDATE = document.getElementById('txt_RESVDATE');
                                var txt_CPNM = document.getElementById('txt_CPNM');
                                var txt_GRFID = document.getElementById('txt_GRFID');
                                
                                $.getJSON(
                                    '/ReservePayment/keyword_reserveID', { "ChangedText": changedText, "Compid": compid, "ReservDate": reservDate },
                                    function (result) {
                                        txtBox.value = result.ID;
                                        txt_RESVDATE.value = result.DATE;
                                        txt_CPNM.value = result.CONTACTP;
                                        txt_GRFID.value = result.GRFID;
                                    });

                                $('#txt_CPNM').val("");
                            });


                            //$('#txt_RESVID').autocomplete({

                            //    source: function (request, response) {
                            //        var compID = $('#txtCompanyid').val();
                            //        var reservDate = $('#txt_RESVDATE').val();
                            //        $.ajax({
                            //            url: '/ReservePayment/TagSearch_reserveID',
                            //            type: 'GET',
                            //            cache: false,
                            //            data: { character: request.term, compid: compID, reservdate: reservDate },
                            //            dataType: 'json',
                            //            success: function (data) {
                            //                response($.map(data, function (item) {
                            //                    return {
                            //                        label: item,
                            //                        value: item,
                            //                    };
                            //                }));
                            //            }
                            //        });
                            //    },
                            //    change: $('#txt_RESVID').keyup(_.debounce(txtOneChanged, 500)),
                            //    select: function (event, ui) {
                            //        $("#txt_RESVID").val(ui.item.label);
                            //        txtOneChanged();
                            //    },
                            //});


                            //function txtOneChanged() {
                            //    var changedText = $("#txt_RESVID").val();
                            //    var reservDate = $("#txt_RESVDATE").val();
                            //    var compid = $('#txtCompanyid').val();

                            //    var txtBox = document.getElementById('txt_RESVID');
                            //    var txt_RESVDATE = document.getElementById('txt_RESVDATE');
                            //    var txt_CPNM = document.getElementById('txt_CPNM');

                            //    $.getJSON(
                            //        '/ReservePayment/keyword_reserveID', { "ChangedText": changedText, "Compid": compid, "ReservDate": reservDate },
                            //        function (result) {
                            //            txtBox.value = result.ID;
                            //            txt_RESVDATE.value = result.DATE;
                            //            txt_CPNM.value = result.CONTACTP;
                            //        });

                            //}







                            $('#txt_RTPID').change(function () {
                                var roomType = $('#txt_RTPID').val();
                                var companyid = $('#txtCompanyid').val();
                                var regDate = $('#txt_REGNDT').val();
                                $("#txt_ROOMNO").val(" ");
                                $.ajax
                                ({
                                    url: '@Url.Action("TagSearch_roomNo", "Registration")',
                                    type: 'get',
                                    dataType: "json",
                                    data: { roomT: roomType, compid: companyid, regDT: regDate },
                                    success: function (data) {
                                        $("#txt_ROOMNO").empty();
                                        $("#txt_ROOMNO").append('<option value="'
                                            + "Select" + '">'
                                            + "Select" + '</option>');


                                        $.each(data, function (i, memo) {

                                            $("#txt_ROOMNO").append('<option value="'
                                                + memo.Value + '">'
                                                + memo.Text + '</option>');

                                        });
                                    }
                                });


                                var reserveID = $('#txt_RESVID').val();
                                var roomType = $('#txt_RTPID').val();
                                var companyid = $('#txtCompanyid').val();
                                var currencyType = $('#txt_CCYTP').val();

                                var txt_ROOMRTO = document.getElementById('txt_ROOMRTO');
                                var txt_DISCTP = document.getElementById('txt_DISCTP');
                                var txt_DISCRT = document.getElementById('txt_DISCRT');
                                var txt_ROOMRTS = document.getElementById('txt_ROOMRTS');

                                $.getJSON('/Registration/RoomTypeChanged', { "Companyid": companyid, "ReserveID": reserveID, "RoomType": roomType, "CurrencyType": currencyType },
                                   function (myData) {
                                       txt_ROOMRTO.value = myData.ROOMRTO;
                                       if ( txt_ROOMRTO.value =="") {
                                            $('#txt_ROOMRTO').val("0");
                                       }
                                       txt_DISCTP.value = myData.DISCTP;
                                       if (txt_DISCTP.value == "") {
                                           $('#txt_DISCTP').val("Select");
                                       }
                                       txt_DISCRT.value = myData.DISCRT;
                                       if (txt_DISCRT.value == "") {
                                           $('#txt_DISCRT').val("0");
                                       }
                                       txt_ROOMRTS.value = myData.ROOMRTS;
                                       if (txt_ROOMRTS.value == "") {
                                           $('#txt_ROOMRTS').val("0");
                                       }
                                   });


                            });



                            //$('#txt_ROOMNO').autocomplete({

                            //    source: function (request, response) {
                            //        var compID = $('#txtCompanyid').val();
                            //        var roomType = $('#txt_RTPID').val();
                            //        $.ajax({
                            //            url: '/Registration/TagSearch_roomNo',
                            //            type: 'GET',
                            //            cache: false,
                            //            data: { character: request.term, compid: compID, roomtype: roomType },
                            //            dataType: 'json',
                            //            success: function (data) {
                            //                response($.map(data, function (item) {
                            //                    return {
                            //                        label: item,
                            //                        value: item,
                            //                    };
                            //                }));
                            //            }
                            //        });
                            //    },
                            //    change: $('#txt_ROOMNO').keyup(_.debounce(txtOneChanged1, 500)),
                            //    select: function (event, ui) {
                            //        $("#txt_ROOMNO").val(ui.item.label);
                            //        txtOneChanged1();
                            //    },
                            //});


                            //function txtOneChanged1() {
                            //    var changedText = $("#txt_ROOMNO").val();
                            //    var roomType = $("#txt_RTPID").val();
                            //    var compid = $('#txtCompanyid').val();

                            //    var txtBox = document.getElementById('txt_ROOMNO');

                            //    $.getJSON(
                            //        '/Registration/keyword_roomNo', { "ChangedText": changedText, "Compid": compid, "RoomType": roomType },
                            //        function (result) {
                            //            txtBox.value = result.ROOMNO;
                            //        });

                            //}



                            //Currency type changed function
                            var changedtxt = $('#txt_CCYTP').val();
                            if (changedtxt == "BDT") {
                                $("#txt_CCYCRT").val("0");
                                $('#txt_CCYCRT').attr('readonly', true);
                            }
                            else { // USD
                                $('#txt_CCYCRT').attr('readonly', false);
                            }

                            $('#txt_CCYTP').change(function () {
                                var changedtxt = $('#txt_CCYTP').val();
                                if (changedtxt == "BDT") {
                                    $("#txt_CCYCRT").val("0");
                                    $('#txt_CCYCRT').attr('readonly', true);
                                }
                                else { // USD
                                    $('#txt_CCYCRT').attr('readonly', false);
                                }

                                $('#txt_RTPID').val("Select");
                                $('#txt_ROOMNO').val("Select");
                                $('#txt_ROOMRTO').val("0");
                                $('#txt_DISCTP').val("Select");
                                $('#txt_DISCRT').val("0");
                                $('#txt_ROOMRTS').val("0");
                            });



                            // Reservation types YES OR NO
                            var changedtxt = $('#txt_RESVYN').val();
                            if (changedtxt == "YES") {
                                $('#reservationDiv').show();
                            }
                            else {
                                $('#reservationDiv').hide();
                            }

                            $('#txt_RESVYN').change(function () {
                                var changedtxt = $('#txt_RESVYN').val();
                                if (changedtxt == "YES") {
                                    $('#reservationDiv').show();
                                }
                                else {
                                    $('#reservationDiv').hide();
                                }
                            });




                            $("#txt_DISCTP").change(function () {
                                var discountType = $('#txt_DISCTP').val();
                                if (discountType == "FIXED") {
                                    document.getElementById('txt_ROOMRTS').value = (parseFloat(document.getElementById('txt_ROOMRTO').value) - parseFloat(document.getElementById('txt_DISCRT').value)).toFixed(2);
                                }
                                else if (discountType == "PERCENTAGE") {
                                    document.getElementById('txt_ROOMRTS').value = (parseFloat(document.getElementById('txt_ROOMRTO').value) - ((parseFloat(document.getElementById('txt_ROOMRTO').value) * parseFloat(document.getElementById('txt_DISCRT').value)) / 100)).toFixed(2);

                                }
                            });


                            $("#txt_ROOMRTO").change(function () {
                                var discountType = $('#txt_DISCTP').val();
                                if (discountType == "FIXED") {
                                    document.getElementById('txt_ROOMRTS').value = (parseFloat(document.getElementById('txt_ROOMRTO').value) - parseFloat(document.getElementById('txt_DISCRT').value)).toFixed(2);
                                }
                                else if (discountType == "PERCENTAGE") {
                                    document.getElementById('txt_ROOMRTS').value = (parseFloat(document.getElementById('txt_ROOMRTO').value) - ((parseFloat(document.getElementById('txt_ROOMRTO').value) * parseFloat(document.getElementById('txt_DISCRT').value)) / 100)).toFixed(2);

                                }
                            });

                            $("#txt_DISCRT").change(function () {
                                var discountType = $('#txt_DISCTP').val();
                                if (discountType == "FIXED") {
                                    document.getElementById('txt_ROOMRTS').value = (parseFloat(document.getElementById('txt_ROOMRTO').value) - parseFloat(document.getElementById('txt_DISCRT').value)).toFixed(2);
                                }
                                else if (discountType == "PERCENTAGE") {
                                    document.getElementById('txt_ROOMRTS').value = (parseFloat(document.getElementById('txt_ROOMRTO').value) - ((parseFloat(document.getElementById('txt_ROOMRTO').value) * parseFloat(document.getElementById('txt_DISCRT').value)) / 100)).toFixed(2);

                                }
                            });



                        });
                    </script>

                    <style type="text/css">
                        .ui-autocomplete {
                            position: absolute;
                            cursor: default;
                            background: #f0ffff;
                            max-height: 200px;
                            overflow-y: auto;
                            /* prevent horizontal scrollbar */
                            overflow-x: hidden;
                            /* add padding to account for vertical scrollbar */
                            padding-right: 20px;
                        }
                    </style>
}

@*<script src="~/Scripts/jquery-1.9.1.min.js"></script>*@

@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@


@*<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-1.9.1.min.js"></script>
    <script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>
    <script src="~/Scripts/Underscore.js"></script>*@
@*<script src="~/Scripts/jquery.js"></script>*@
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
